///////////////////////////////////////
/////////// CUDA KERNEL ///////////////
///////////////////////////////////////

template < typename TYPE, int DIMPOINT, int DIMSIG, int DIMVECT >
__global__ void fshape_scp_OnDevice(TYPE ooSigmax2, TYPE ooSigmaf2, TYPE ooSigmaXi2,
                                    TYPE *x, TYPE *y,
                                    TYPE *f, TYPE *g,
                                    TYPE *alpha, TYPE *beta,
                                    TYPE *gamma,
                                    int nx, int ny) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    extern __shared__ TYPE SharedData[];  // shared data will contain x and alpha data for the block

    TYPE xi[DIMPOINT], fi[DIMSIG], alphai[DIMPOINT], gammai;
    if(i<nx) { // we will compute gammai only if i is in the range
        // load xi from device global memory
        for(int k=0; k<DIMPOINT; k++)
            xi[k] = x[i*DIMPOINT+k];
        for(int k=0; k<DIMSIG; k++)
            fi[k] = f[i*DIMSIG+k];
        for(int k=0; k<DIMVECT; k++)
            alphai[k] = alpha[i*DIMVECT+k];

        gammai = 0.0f;
    }

    for(int jstart = 0, tile = 0; jstart < ny; jstart += blockDim.x, tile++) {
        int j = tile * blockDim.x + threadIdx.x;
        if(j<ny) { // we load yj and betaj from device global memory only if j<ny
            int inc = DIMPOINT + DIMSIG + DIMVECT;
            for(int k=0; k<DIMPOINT; k++)
                SharedData[threadIdx.x*inc+k] = y[j*DIMPOINT+k];
            for(int k=0; k<DIMSIG; k++)
                SharedData[threadIdx.x*inc+DIMPOINT+k] = g[j*DIMSIG+k];
            for(int k=0; k<DIMVECT; k++)
                SharedData[threadIdx.x*inc+DIMPOINT+DIMSIG+k] = beta[j*DIMVECT+k];
        }
        __syncthreads();

        if(i<nx) { // we compute gammai only if needed
            TYPE *yj, *gj, *betaj;
            yj = SharedData;
            gj = SharedData + DIMPOINT;
            betaj = SharedData + DIMPOINT + DIMSIG;
            int inc = DIMPOINT + DIMSIG + DIMVECT;
            for(int jrel = 0; jrel < blockDim.x && jrel<ny-jstart; jrel++, yj+=inc, gj +=inc, betaj+=inc) {

                // distance between points and signals
                TYPE dist2_geom = sq_dist<TYPE,DIMPOINT>(xi,yj);
                TYPE dist2_sig = sq_dist<TYPE,DIMSIG>(fi,gj);

                // Angles between normals
                TYPE norm2Xix = 0.0f, norm2Xiy = 0.0f, prsxy = 0.0f;
                for(int k=0; k<DIMVECT; k++) {
                    norm2Xix += alphai[k]*alphai[k];
                    norm2Xiy += betaj[k]*betaj[k];
                    prsxy +=  alphai[k]*betaj[k];
                }
                TYPE angle_normals = prsxy  * rsqrt(norm2Xix*norm2Xiy);

                gammai += sqrt(norm2Xix * norm2Xiy) * Kernel_geom1(dist2_geom,ooSigmax2) * Kernel_sig1(dist2_sig,ooSigmaf2) * Kernel_var1(angle_normals,ooSigmaXi2);
            }
        }
        __syncthreads();
    }

    // Save the result in global memory.
    if(i<nx)
        gamma[i] = gammai;
}
