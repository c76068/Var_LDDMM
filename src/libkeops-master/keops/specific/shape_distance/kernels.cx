// compares two strings in compile time constant fashion

template < typename TYPE, int DIM >
__device__  TYPE sq_dist(TYPE *u, TYPE *v) {

    TYPE r2 = 0.0f;
    for(int k=0; k<DIM; k++) {
        TYPE temp =  v[k]-u[k];
        r2 += temp*temp;
    }

    return r2;

}


///////////////////////
// Kernels on signal //
///////////////////////
#define GAUSSIAN_SIG 0
#define CAUCHY_SIG 1

#if KERNEL_SIG_TYPE == CAUCHY_SIG

template < typename TYPE >
__device__  TYPE Kernel_sig1(TYPE u2, TYPE ooSigma2) {

    return 1.0/(1.0+u2*ooSigma2);

}

template < typename TYPE >
__device__  TYPE dKernel_sig1(TYPE u2, TYPE ooSigma2) {

    TYPE c = 1.0+u2*ooSigma2;
    return - ooSigma2 / (c*c);

}

#elif KERNEL_SIG_TYPE == GAUSSIAN_SIG
template < typename TYPE>
__device__  TYPE Kernel_sig1(TYPE u2, TYPE ooSigma2) {

    return exp(- u2 * ooSigma2);

}

template < typename TYPE>
__device__  TYPE dKernel_sig1(TYPE u2, TYPE ooSigma2) {

    return - ooSigma2 * exp(- u2 * ooSigma2);

}


#endif





///////////////////////
// geometric Kernels  //
///////////////////////
#define GAUSSIAN_GEOM 0
#define CAUCHY_GEOM 1

#if KERNEL_GEOM_TYPE == CAUCHY_GEOM
template < typename TYPE >
__device__  TYPE Kernel_geom1(TYPE u2, TYPE ooSigma2) {

    return 1.0/(1.0+u2*ooSigma2);

}

template < typename TYPE >
__device__  TYPE dKernel_geom1(TYPE u2, TYPE ooSigma2) {

    TYPE c = 1.0+u2*ooSigma2;
    return - ooSigma2 / (c*c);

}

#elif KERNEL_GEOM_TYPE == GAUSSIAN_GEOM
template < typename TYPE>
__device__  TYPE Kernel_geom1(TYPE u2, TYPE ooSigma2) {

    return exp(- u2 * ooSigma2);

}

template < typename TYPE>
__device__  TYPE dKernel_geom1(TYPE u2, TYPE ooSigma2) {

    return - ooSigma2 * exp(- u2 * ooSigma2);

}

#endif


//////////////////////////
//  Kernel on Varifold  //
//////////////////////////
#define GAUSSIAN_UNORIENTED 0
#define BINET 1
#define GAUSSIAN_ORIENTED 2
#define LINEAR 3

//#define KERNEL_SPHERE KERNEL_SPHERE_TYPE


#if KERNEL_SPHERE_TYPE == GAUSSIAN_UNORIENTED
// GAUSIAN UNORIENTED

template < typename TYPE >
__device__  TYPE Kernel_var1(TYPE u, TYPE ooSigma2) {


    // Gaussian kernel
    return exp( (-2.0f + 2.0f * u*u) * ooSigma2);

}

template < typename TYPE >
__device__  TYPE dKernel_var1(TYPE u, TYPE ooSigma2) {


    // Gaussian kernel
    return  4.0f * u * exp( (-2.0f + 2.0f * u *u) * ooSigma2) * ooSigma2;

}
#elif KERNEL_SPHERE_TYPE == BINET
// BINET
template < typename TYPE>
__device__  TYPE Kernel_var1(TYPE u, TYPE ooSigma2) {

    return  u * u;

}

template < typename TYPE>
__device__  TYPE dKernel_var1(TYPE u, TYPE ooSigma2) {


    return  2 * u;

}


#elif KERNEL_SPHERE_TYPE == GAUSSIAN_ORIENTED
// GAUSSIAN ORIENTED

template < typename TYPE>
__device__  TYPE Kernel_var1(TYPE u, TYPE ooSigma2) {

    return  exp( (-2.0f + 2.0 * u) * ooSigma2 );

}

template < typename TYPE>
__device__  TYPE dKernel_var1(TYPE u, TYPE ooSigma2) {

    return  2.0 * ooSigma2 * exp( (-2.0f + 2.0 * u) * ooSigma2 );

}


#elif KERNEL_SPHERE_TYPE == LINEAR
// LINEAR (current)

template < typename TYPE>
__device__  TYPE Kernel_var1(TYPE u, TYPE ooSigma2) {

    return  u;

}

template < typename TYPE>
__device__  TYPE dKernel_var1(TYPE u, TYPE ooSigma2) {

    return  1.0f;

}

#endif
